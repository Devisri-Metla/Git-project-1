CREATE TABLE students(
stud_id varchar(20),
stud_name varchar(50),
stud_age int(100),
stud_grade varchar(100)
);
INSERT INTO students values(12,"ishi",18,'A');
INSERT INTO students values(13,"sri",19,'A+');
INSERT INTO students values(14,"aish",19,'A+');
INSERT INTO students values(11,"charan",25,'B');
INSERT INTO students values(15,"ram",23,'c');
select * FROM students;
select stud_id FROM students;
select stud_age FROM students where stud_id=13;
update students SET stud_age=20 where stud_id=14;
select * from students;
DELETE from students where stud_id=15;
select * from students;
select * from students order by stud_id desc;
alter table students add column phone varchar2(20);


Tables:-

Employees:

EmpID	Name	DeptID
1	Alice	101
2	Bob	102
3	Charlie	101
4	David	103


Departments:

DeptID	DeptName
101	HR
102	IT
104	Marketing

INNER JOIN:An INNER JOIN returns only the rows that have matching values in both tables.

SELECT column_names
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

Example:

SELECT Employees.Name, Departments.DeptName
FROM Employees
INNER JOIN Departments
ON Employees.DeptID = Departments.DeptID;

Result:

Name	DeptName
Alice	HR
Bob	IT
Charlie	HR


Explanation: The INNER JOIN only returns rows where there is a match between the DeptID in both Employees and Departments.

-------------------------------------------------------------


LEFT JOIN (LEFT OUTER JOIN)
A LEFT JOIN returns all the rows from the left table (first table), and the matched rows from the right table. If there is no match, the result is NULL from the right table.

Syntax:

SELECT column_names
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;


SELECT Employees.Name, Departments.DeptName
FROM Employees
LEFT JOIN Departments
ON Employees.DeptID = Departments.DeptID;

Result:

Name	DeptName
Alice	HR
Bob	IT
Charlie	HR
David	NULL


Explanation: In this LEFT JOIN, all rows from the Employees table are returned, but David has no matching DeptID in the Departments table, so NULL is returned for his department.


------------------------------------------------------------------

RIGHT JOIN (RIGHT OUTER JOIN)
A RIGHT JOIN returns all rows from the right table (second table), and the matched rows from the left table. If there is no match, the result is NULL from the left table.

Syntax:

SELECT column_names
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;


Example:
Query:

SELECT Employees.Name, Departments.DeptName
FROM Employees
RIGHT JOIN Departments
ON Employees.DeptID = Departments.DeptID;

Result:

Name	DeptName
Alice	HR
Bob	IT
Charlie	HR
NULL	Marketing

Explanation: All rows from the Departments table are returned, even if there are no matching rows in the Employees table. Since no employee is assigned to the Marketing department, NULL is returned for the employee name.
--------------------------------------------------------------
FULL JOIN (FULL OUTER JOIN)
A FULL JOIN returns all rows when there is a match in either the left or right table. If there is no match, NULL is returned.

Syntax:

SELECT column_names
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name;


Example:

SELECT Employees.Name, Departments.DeptName
FROM Employees
FULL OUTER JOIN Departments
ON Employees.DeptID = Departments.DeptID;

Result:

Name	DeptName
Alice	HR
Bob	IT
Charlie	HR
David	NULL
NULL	Marketing

Explanation: The FULL JOIN returns all rows from both tables. Where there is no match, NULL is returned for the missing data from either table.
---------------------------------------------------------------
CROSS JOIN

A CROSS JOIN returns the Cartesian product of the two tables, i.e., every row in the first table is paired with every row in the second table. It is rarely used because it generates a large number of rows.

Syntax:

SELECT column_names FROM table1 CROSS JOIN table2;

Example:
Query:


SELECT Employees.Name, Departments.DeptName
FROM Employees
CROSS JOIN Departments;


Result:

Name	DeptName
Alice	HR
Alice	IT
Alice	Marketing
Bob	HR
Bob	IT
Bob	Marketing
Charlie	HR
Charlie	IT
Charlie	Marketing
David	HR
David	IT
David	Marketing

Explanation: A CROSS JOIN returns every combination of rows from Employees and Departments.
---------------------------------------------------------
SELF JOIN

A SELF JOIN is used to join a table with itself. It is commonly used when there is a hierarchical relationship within the same table.

Syntax

SELECT a.column_name, b.column_name
FROM table_name a, table_name b
WHERE condition;


Example:
Table:

Employees:
EmpID	Name	ManagerID
1	Alice	NULL
2	Bob	1
3	Charlie	1
4	David	2


Query:


SELECT a.Name AS Employee, b.Name AS Manager
FROM Employees a
LEFT JOIN Employees b
ON a.ManagerID = b.EmpID;


Result:

Employee	Manager
Alice	          NULL
Bob	          Alice
Charlie	           Alice
David	           Bob

Explanation: A SELF JOIN is used to retrieve the manager's name for each employee by joining the Employees table with itself.




--------------------------------------------------------------------------------------------------------------------------------
program for power of 2 or not

#include <stdio.h>

int main()
{
    long long int num;
    scanf(""%lld"",&num);
    int flag=0;
    if(num%2==1)
      printf(""NO"");
    else
    {
    while(num>2){
        num/=2;
        if(num%2==1)
        {
            flag=1;
            break;
        }
    }
    if(flag==0)
      printf("YES");
     else 
       printf("NO");
    
    }

    return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------
program for cal min,max,avg,sum for a given nums without using array



#include<stdio.h>
int main(){
    int max,min,sum=0,val;
    float avg,count=0;
    scanf(""%d"",&val);
    max=val;
    min=val;
    for(;val!=-1;scanf(""%d"",&val)){
        sum+=val;
        if(max<val){
            max=val;
        }
        if(min>val){
            min=val;
        }
        count++;
    }
    avg = sum/count;
    
    printf(""Min = %d\nMax = %d\nSum = %d\nAverage = %f"",min,max,sum,avg);
    return 0;
}"

-------------------------------------------------------------------------------------------
----->Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT(CITY)
  FROM STATION
 WHERE CITY REGEXP '^[^aeiouAEIOU]|[^aeiouAEIOU]$';
-------------------------------------------------------------
--->Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

select distinct city from station where substr(city, 1, 1) not in ('a','e','i','o','u') and substr(city, -1, 1) not in ('a','e','i','o', 'u');


-------------------------------------------------------------
------>Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle


SELECT 
    CASE
        WHEN A+B<=C OR A+C<=B OR B+C<=A THEN 'Not A Triangle'
        WHEN A=B AND B=C THEN 'Equilateral'
        WHEN A=B OR A=C OR B=C THEN 'Isosceles'
        ELSE 'Scalene'
    END
FROM TRIANGLES;


--------------------------------------------------------------------------------------------------------------------------

----->Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.


select N, case when P IS NULL then 'Root' 
when N in (select distinct P from BST) and P IS NOT NULL then 'Inner' 
else 'Leaf' end from BST order by 1;

--------------------------------------------------------------------------------------------------------------------------
Write a query to print all prime numbers less than or equal to 1000. Print your result on a single line, and use the ampersand (&) character as your separator (instead of a space).

For example, the output for all prime numbers <= would be:2&3&5&7




SET @max := 1000;

WITH RECURSIVE
Numbers AS (
    SELECT 2 as n
    UNION
    SELECT n+1 as n FROM Numbers WHERE n < @max
),
Primes AS (
    SELECT 2 as p
    UNION
    SELECT O.n AS p FROM Numbers AS O WHERE 
      ( SELECT MIN(O.n % I.n) FROM Numbers AS I
	WHERE I.n <= CEIL(POW(O.n,0.5)) )
)

SELECT GROUP_CONCAT(p SEPARATOR '&') FROM Primes;
